"""add test schema

Revision ID: 0385449d7ae5
Revises: c082831e6841
Create Date: 2025-07-05 17:11:47.790598

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "0385449d7ae5"
down_revision: Union[str, None] = "c082831e6841"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS test")
    op.create_table(
        "flag",
        sa.Column("entity_id", sa.UUID(), nullable=False),
        sa.Column(
            "entity_flagged",
            sa.Enum("video", "sponsorship", "sponsored_segment", name="entitytype", schema="test"),
            nullable=False,
        ),
        sa.Column("field_flagged", sa.String(), nullable=False),
        sa.Column("value_flagged", sa.JSON(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("pending", "resolved", "dismissed", name="flagstatus", schema="test"),
            nullable=True,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="test",
    )
    op.create_index(
        op.f("ix_test_flag_entity_flagged"), "flag", ["entity_flagged"], unique=False, schema="test"
    )
    op.create_index(
        op.f("ix_test_flag_entity_id"), "flag", ["entity_id"], unique=False, schema="test"
    )
    op.create_index(
        op.f("ix_test_flag_field_flagged"), "flag", ["field_flagged"], unique=False, schema="test"
    )
    op.create_index(op.f("ix_test_flag_id"), "flag", ["id"], unique=True, schema="test")
    op.create_index(op.f("ix_test_flag_status"), "flag", ["status"], unique=False, schema="test")
    op.create_table(
        "video",
        sa.Column("youtube_id", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("upload_date", sa.Date(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("duration", sa.Float(), nullable=True),
        sa.Column("channel", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("youtube_id"),
        schema="test",
    )
    op.create_index(op.f("ix_test_video_id"), "video", ["id"], unique=True, schema="test")
    op.create_index(
        op.f("ix_test_video_language"), "video", ["language"], unique=False, schema="test"
    )
    op.create_table(
        "sponsoredsegment",
        sa.Column("sponsorblock_id", sa.String(), nullable=True),
        sa.Column("start_time", sa.Float(), nullable=False),
        sa.Column("end_time", sa.Float(), nullable=False),
        sa.Column("subtitles", sa.String(), nullable=True),
        sa.Column("duration", sa.Float(), nullable=False),
        sa.Column("parent_video_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["parent_video_id"],
            ["test.video.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("sponsorblock_id"),
        schema="test",
    )
    op.create_index(
        op.f("ix_test_sponsoredsegment_id"), "sponsoredsegment", ["id"], unique=True, schema="test"
    )
    op.create_index(
        op.f("ix_test_sponsoredsegment_parent_video_id"),
        "sponsoredsegment",
        ["parent_video_id"],
        unique=False,
        schema="test",
    )
    op.create_table(
        "videometadata",
        sa.Column("raw_json", sa.JSON(), nullable=False),
        sa.Column("raw_transcript", sa.JSON(), nullable=True),
        sa.Column("video_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["video_id"],
            ["test.video.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="test",
    )
    op.create_index(
        op.f("ix_test_videometadata_id"), "videometadata", ["id"], unique=True, schema="test"
    )
    op.create_index(
        op.f("ix_test_videometadata_video_id"),
        "videometadata",
        ["video_id"],
        unique=False,
        schema="test",
    )
    op.create_table(
        "sponsorship",
        sa.Column("sponsor_name", sa.String(), nullable=False),
        sa.Column("sponsor_description", sa.String(), nullable=True),
        sa.Column("sponsor_links", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("sponsor_coupon_code", sa.String(), nullable=True),
        sa.Column("sponsor_offer", sa.String(), nullable=True),
        sa.Column("sponsored_segment_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["sponsored_segment_id"],
            ["test.sponsoredsegment.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="test",
    )
    op.create_index(
        op.f("ix_test_sponsorship_id"), "sponsorship", ["id"], unique=True, schema="test"
    )
    op.create_index(
        op.f("ix_test_sponsorship_sponsored_segment_id"),
        "sponsorship",
        ["sponsored_segment_id"],
        unique=False,
        schema="test",
    )
    op.create_table(
        "generatedsponsorship",
        sa.Column("sponsor_name", sa.String(), nullable=False),
        sa.Column("sponsor_description", sa.String(), nullable=True),
        sa.Column("sponsor_links", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("sponsor_coupon_code", sa.String(), nullable=True),
        sa.Column("sponsor_offer", sa.String(), nullable=True),
        sa.Column("generator", sa.String(), nullable=True),
        sa.Column("provider", sa.String(), nullable=True),
        sa.Column("model", sa.String(), nullable=True),
        sa.Column("sponsorship_id", sa.UUID(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["sponsorship_id"],
            ["test.sponsorship.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="test",
    )
    op.create_index(
        op.f("ix_test_generatedsponsorship_id"),
        "generatedsponsorship",
        ["id"],
        unique=True,
        schema="test",
    )
    op.create_index(
        op.f("ix_test_generatedsponsorship_sponsorship_id"),
        "generatedsponsorship",
        ["sponsorship_id"],
        unique=False,
        schema="test",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP SCHEMA IF EXISTS test CASCADE")
    # ### end Alembic commands ###
